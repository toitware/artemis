# Copyright (C) 2023 Toitware ApS. All rights reserved.

name: Build

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  SUPPORTED_SDK_VERSIONS: |
      v2.0.0-alpha.70

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Toit
        shell: bash
        run: |
          if [[ "$RUNNER_OS" = "Windows" ]]; then
            BIN_EXTENSION=".exe"
          fi
          echo "BIN_EXTENSION=$BIN_EXTENSION" >> $GITHUB_ENV

          export TOIT_VERSION="v2.0.0-alpha.70"

          export DOWNLOAD_DIR="${{ github.workspace }}/downloads"
          echo "DOWNLOAD_DIR=$DOWNLOAD_DIR" >> $GITHUB_ENV

          TOIT_SDK_DIR=$DOWNLOAD_DIR/toit
          echo "TOIT_EXEC=$TOIT_SDK_DIR/bin/toit.run$BIN_EXTENSION" >> $GITHUB_ENV
          echo "TOITC_EXEC=$TOIT_SDK_DIR/bin/toit.compile$BIN_EXTENSION" >> $GITHUB_ENV
          echo "TPKG_EXEC=$TOIT_SDK_DIR/bin/toit.pkg$BIN_EXTENSION" >> $GITHUB_ENV

          SYSTEM=$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]')
          echo "SYSTEM=$SYSTEM" >> $GITHUB_ENV

          TOIT_SDK_FILE=toit-$SYSTEM.tar.gz
          TOIT_SDK_BASE_URL=https://github.com/toitlang/toit/releases

          echo "TOIT_SDK_URL=$TOIT_SDK_BASE_URL/download/$TOIT_VERSION/$TOIT_SDK_FILE" >> $GITHUB_ENV

      - uses: suisei-cn/actions-download-file@v1.3.0
        name: Download Toit
        with:
          url: ${{ env.TOIT_SDK_URL }}
          target: ${{ env.DOWNLOAD_DIR }}

      - name: Extract Toit - Linux
        shell: bash
        run: |
          cd "$DOWNLOAD_DIR"
          tar x -f *.tar.gz

      # Fetch the dependencies. Different for each platform.
      - name: Install dependencies - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -q
          sudo apt-get install -q ninja-build
          ninja --version
      - name: Install dependencies - macOS
        if: runner.os == 'macOS'
        run: |
          brew install ninja
          ninja --version
      - name: Install dependencies - Windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          ninja --version

      - name: Run cmake
        shell: bash
        run: |
          make rebuild-cmake
          cmake -DTOITC="$TOITC_EXEC" -DTOITPKG="$TPKG_EXEC" -DTOITRUN="$TOIT_EXEC" build

      - name: Build the CLI
        shell: bash
        run: |
          make

      - name: Rename snapshot
        shell: bash
        run: |
          UUID=$(build/bin/snapshot_uuid$BIN_EXTENSION build/snapshots/artemis.snapshot)
          echo "ARTEMIS_UUID=$UUID" >> $GITHUB_ENV
          mv build/snapshots/artemis.snapshot build/snapshots/artemis-$UUID.snapshot

      - name: Sign in to Artemis
        shell: bash
        env:
          ARTEMIS_EMAIL: leon@toit.io
          ARTEMIS_PASSWORD: ${{ secrets.LEON_ARTEMIS_PW }}
        run: |
          # We log in with the Artemis executable.
          # It will set the authentication in the config file which is also
          # used by the uploader.
          build/bin/artemis$BIN_EXTENSION auth artemis login --email "$ARTEMIS_EMAIL" --password "$ARTEMIS_PASSWORD"

      - name: Upload snapshot to Artemis
        shell: bash
        run: |
          # No need to cache the snapshots in a local snapshot directory.
          mkdir -p tmp_snapshots
          build/bin/uploader$BIN_EXTENSION cli-snapshot \
            --snapshot-directory tmp_snapshots \
            build/snapshots/*.snapshot

      - name: Build and upload service images
        if: runner.os == 'Linux' && github.event_name == 'release'
        shell: bash
        run: |
          # No need to cache the snapshots in a local snapshot directory.
          mkdir -p tmp_snapshots
          for version in $SUPPORTED_SDK_VERSIONS; do
            # For each supported SDK version, build the locally checked out
            # version of the service and upload it to Artemis.
            build/bin/uploader service \
                --snapshot-directory tmp_snapshots \
                --sdk-version $version \
                --service-version ${{ github.event.release.tag_name }} \
                --local
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artemis-${{ env.SYSTEM }}
          path: |
            build/bin/*
            build/snapshots/artemis-${{ env.ARTEMIS_UUID }}.snapshot

  sign_artemis_windows:
    runs-on: windows-signing
    needs: [build]
    if: github.event_name == 'release'
    steps:
      - name: Clean workspace
        run: |
          rm -Recurse -Force ${{ github.workspace }}\*

      - uses: actions/download-artifact@v3
        with:
          name: artemis-windows
          path: build

      - name: Sign artemis
        working-directory: ./build/bin
        run: |
          signtool sign /debug /n "Toitware ApS" /t http://timestamp.digicert.com/ $PWD/artemis.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artemis-signed-windows
          path: build

  sign_artemis_macos:
    runs-on: macos-latest
    needs: [build]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: artemis-macos
          path: build

      - name: Setup binary rights
        run: |
          chmod +x build/bin/artemis

      - name: Import signing keychain
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      - name: Install gon via HomeBrew for code signing and app notarization
        run: |
          brew tap mitchellh/gon
          brew install mitchellh/gon/gon

      - name: Sign the mac binaries with Gon
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          gon -log-level=debug -log-json tools/gon.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artemis-signed-macos
          path: build

  do_release:
    runs-on: ubuntu-latest
    needs: [sign_artemis_windows, sign_artemis_macos]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3

      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: artemis-linux
          path: build-linux

      - name: Download signed Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: artemis-signed-windows
          path: build-windows

      - name: Download signed macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: artemis-signed-macos
          path: build-macos

      - name: Debug list
        shell: bash
        run: |
          find .

      - name: Create archives
        shell: bash
        run: |
          mkdir release-assets

          mkdir artemis-linux
          mv build-linux/bin/artemis artemis-linux
          chmod +x artemis-linux/artemis
          tar -czf release-assets/artemis-linux.tar.gz artemis-linux

          mkdir artemis-windows
          zip release-assets/artemis-windows.zip build-windows/bin/artemis.exe

          mkdir artemis-macos
          mv build-macos/artemis.dmg release-assets/artemis.dmg
          mv build-macos/artemis.zip release-assets/artemis-macos.zip

      # Prepare the admin tools.
      # They are not publicly released, and are just uploaded to make
      # administration easier, without needing to build the tools locally.
      - name: Prepare admin tools
        shell: bash
        run: |
          mkdir admin-tools-linux
          (cd build-linux/bin; for f in *; do cp $f ../../admin-tools-linux/$f; done)
          # The Linux artemis executable was already moved away.
          tar -czf admin-tools-linux.tar.gz admin-tools-linux

          mkdir admin-tools-windows
          (cd build-windows/bin; for f in *; do cp $f ../../admin-tools-windows/$f; done)
          rm -f admin-tools-windows/artemis.exe
          tar -czf admin-tools-windows.tar.gz admin-tools-windows

          mkdir admin-tools-macos
          (cd build-macos/bin; for f in *; do cp $f ../../admin-tools-macos/$f; done)
          rm -f admin-tools-macos/artemis
          tar -czf admin-tools-macos.tar.gz admin-tools-macos

      - name: Upload release artifacts as assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: release-assets/*
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload admin artifacts as assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: admin-tools-*.tar.gz
          tag: ${{ github.ref }}
          overwrite: true

      - name: Create public release
        env:
          GITHUB_TOKEN: ${{ secrets.LEON_ARTEMIS_RELEASE_PAT }}
        run: |
          BODY=$(echo "${{ github.event.release.body }}" | sed 's/ by @.*$//' | sed '/^## Private/,$d')
          gh release create "${{ github.event.release.tag_name }}" \
            -R toitware/artemis-releases \
            -t "${{ github.event.release.name }}" \
            -n "$BODY" \
            release-assets/*
