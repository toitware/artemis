# Copyright (C) 2023 Toitware ApS. All rights reserved.

name: Build

on:
  workflow_dispatch:
    inputs:
      upload_service_snapshot:
        description: Upload the service snapshot image to Artemis
        type: boolean
        required: true
        default: false
      sign_macos:
        description: Sign the macOS binary
        type: boolean
        required: true
        default: false
      sign_windows:
        description: Sign the Windows binary
        type: boolean
        required: true
        default: false
  release:
    types: [published]

env:
  SUPPORTED_SDK_VERSIONS: |
      v2.0.0-alpha.94

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Toit
        shell: bash
        run: |
          SUPPORTED_ARRAY=($SUPPORTED_SDK_VERSIONS)
          if [[ "$(make dev-sdk-version)" != "${SUPPORTED_ARRAY[-1]}" ]]; then
            echo "Test SDK version is not last supported SDK version"
            exit 1
          fi
          export TOIT_VERSION=${SUPPORTED_ARRAY[-1]}

          export DOWNLOAD_DIR="${{ github.workspace }}/downloads"
          echo "DOWNLOAD_DIR=$DOWNLOAD_DIR" >> $GITHUB_ENV

          TOIT_SDK_DIR=$DOWNLOAD_DIR/toit
          echo "TOIT_EXEC=$TOIT_SDK_DIR/bin/toit.run$BIN_EXTENSION" >> $GITHUB_ENV
          echo "TOITC_EXEC=$TOIT_SDK_DIR/bin/toit.compile$BIN_EXTENSION" >> $GITHUB_ENV
          echo "TPKG_EXEC=$TOIT_SDK_DIR/bin/toit.pkg$BIN_EXTENSION" >> $GITHUB_ENV

          TOIT_SDK_BASE_URL=https://github.com/toitlang/toit/releases

          echo "TOIT_SDK_URL=$TOIT_SDK_BASE_URL/download/$TOIT_VERSION/toit-linux.tar.gz" >> $GITHUB_ENV

      - uses: suisei-cn/actions-download-file@v1.3.0
        name: Download Toit
        with:
          url: ${{ env.TOIT_SDK_URL }}
          target: ${{ env.DOWNLOAD_DIR }}

      - name: Extract Toit - Linux
        shell: bash
        run: |
          cd "$DOWNLOAD_DIR"
          tar x -f *.tar.gz

      - name: Install dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -q ninja-build
          ninja --version

      - name: Run cmake
        shell: bash
        run: |
          make rebuild-cmake
          cmake -DTOITC="$TOITC_EXEC" -DTOITPKG="$TPKG_EXEC" -DTOITRUN="$TOIT_EXEC" build

      - name: Build the CLI
        shell: bash
        # Note that we don't deploy the executable from this buildstep as it isn't stripped.
        run: |
          make

      - name: Build release binaries
        shell: bash
        run: |
          mkdir -p out/linux
          $TOITC_EXEC --strip -o out/linux/artemis build/snapshots/artemis.snapshot

          for SYSTEM in windows macos aarch64; do
            if [[ $SYSTEM == "windows" ]]; then
              BIN_EXTENSION=".exe"
            else
              BIN_EXTENSION=""
            fi
            if [[ $SYSTEM == "aarch64" ]]; then
              OS="linux"
              ARCH="arm64"
            elif [[ $SYSTEM == "macos" ]]; then
              OS="darwin"
              ARCH="amd64"
            else
              OS=$SYSTEM
              ARCH="amd64"
            fi
            mkdir -p out/$SYSTEM
            $TOITC_EXEC --strip --arch $ARCH --os $OS \
              -o out/$SYSTEM/artemis$BIN_EXTENSION build/snapshots/artemis.snapshot
          done

      - name: Rename snapshot
        shell: bash
        run: |
          UUID=$(build/bin/snapshot_uuid$BIN_EXTENSION build/snapshots/artemis.snapshot)
          echo "ARTEMIS_UUID=$UUID" >> $GITHUB_ENV
          mv build/snapshots/artemis.snapshot build/snapshots/artemis-$UUID.snapshot

      - name: Sign in to Artemis
        if: github.event_name == 'release' || inputs.upload_service_snapshot
        shell: bash
        env:
          ARTEMIS_EMAIL: leon@toit.io
          ARTEMIS_PASSWORD: ${{ secrets.LEON_ARTEMIS_PW }}
        run: |
          # We log in with the Artemis executable.
          # It will set the authentication in the config file which is also
          # used by the uploader.
          build/bin/artemis auth login --email "$ARTEMIS_EMAIL" --password "$ARTEMIS_PASSWORD"

      - name: Upload snapshot to Artemis
        if: github.event_name == 'release' || inputs.upload_service_snapshot
        shell: bash
        run: |
          # No need to cache the snapshots in a local snapshot directory.
          mkdir -p tmp_snapshots
          build/bin/uploader cli-snapshot \
            --snapshot-directory tmp_snapshots \
            build/snapshots/*.snapshot

      - name: Build and upload service images
        if: github.event_name == 'release'
        shell: bash
        run: |
          # No need to cache the snapshots in a local snapshot directory.
          mkdir -p tmp_snapshots
          for version in $SUPPORTED_SDK_VERSIONS; do
            # For each supported SDK version, build the locally checked out
            # version of the service and upload it to Artemis.
            build/bin/uploader service \
                --snapshot-directory tmp_snapshots \
                --sdk-version $version \
                --service-version ${{ github.event.release.tag_name }} \
                --local
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artemis
          path: |
            build/bin/*
            build/snapshots/artemis-${{ env.ARTEMIS_UUID }}.snapshot

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artemis-release-binaries
          path: out/*

  sign_artemis_windows:
    runs-on: windows-signing
    needs: [build]
    if: github.event_name == 'release' || inputs.sign_windows
    steps:
      - name: Clean workspace
        run: |
          rm -Recurse -Force ${{ github.workspace }}\*

      - uses: actions/download-artifact@v3
        with:
          name: artemis-release-binaries
          path: out

      - name: Sign artemis
        working-directory: ./out/windows
        run: |
          signtool sign /debug /n "Toitware ApS" /t http://timestamp.digicert.com/ $PWD/artemis.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artemis-signed-windows
          path: ./out/windows

  sign_artemis_macos:
    runs-on: macos-latest
    needs: [build]
    if: github.event_name == 'release' || inputs.sign_macos
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: artemis-release-binaries
          path: out

      - name: Install dependencies
        run: |
          set -e
          brew install create-dmg
          brew install zip

      - name: Setup binary rights
        run: |
          chmod +x out/macos/artemis

      - name: Sign and notarize
        uses: toitlang/action-macos-sign-notarize@v1.0.0
        with:
          certificate: ${{ secrets.MACOS_CERTIFICATE }}
          certificate-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          username: ${{ secrets.AC_USERNAME }}
          password: ${{ secrets.AC_PASSWORD }}
          apple-team-id: 33DS2ZRDST
          app-path: out/macos/artemis

      - name: Create a DMG
        run: |
          # Use an empty directory as source so we don't accidentally add other files than the
          # artemis binary.
          set -e
          mkdir empty
          create-dmg \
              --volname "artemis" \
              --add-file artemis out/macos/artemis 0 0 \
              out/macos/artemis.dmg \
              empty

      - name: Create a ZIP
        run: |
          zip -j out/macos/artemis.zip out/macos/artemis

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artemis-signed-macos
          path: ./out

  do_release:
    runs-on: ubuntu-latest
    needs: [sign_artemis_windows, sign_artemis_macos]
    steps:
      - uses: actions/checkout@v3

      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: artemis-release-binaries
          path: out

      - name: Download signed Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: artemis-signed-windows
          path: out

      - name: Download signed macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: artemis-signed-macos
          path: out

      - name: Debug list
        shell: bash
        run: |
          find .

      - name: Create archives
        shell: bash
        run: |
          mkdir release-assets

          mkdir artemis-linux
          mv out/linux/artemis artemis-linux
          chmod +x artemis-linux/artemis
          tar -czf release-assets/artemis-linux.tar.gz artemis-linux

          mkdir artemis-windows
          zip -j release-assets/artemis-windows.zip out/windows/artemis.exe

          mkdir artemis-macos
          mv out/macos/artemis.dmg release-assets/artemis.dmg
          mv out/macos/artemis.zip release-assets/artemis-macos.zip

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: release-assets

      - name: Upload release artifacts as assets
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: release-assets/*
          tag: ${{ github.ref }}
          overwrite: true

      - name: Create public release
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.LEON_ARTEMIS_RELEASE_PAT }}
        run: |
          BODY=$(echo "${{ github.event.release.body }}" | sed 's/ by @.*$//' | sed '/^## Private/,$d')
          gh release create "${{ github.event.release.tag_name }}" \
            -R toitware/artemis-releases \
            -t "${{ github.event.release.name }}" \
            -n "$BODY" \
            release-assets/*
