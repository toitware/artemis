# Copyright (C) 2023 Toitware ApS. All rights reserved.

name: CI

on:
  workflow_dispatch:
    inputs:
      upload-service:
        description: "Upload service for Testing org"
        required: false
        default: false
        type: boolean
  push:
    branches:
      - "*"
      - "*/*"

env:
  SUPABASE_VERSION: 1.187.10
  EXCLUDED_SUPABASE_SERVICES: imgproxy,inbucket,pgadmin-schema-diff,migra,studio,deno-relay
  # Qemu release page: https://github.com/espressif/qemu/releases/tag/esp-develop-8.2.0-20240122
  QEMU_LINUX_URL: https://github.com/espressif/qemu/releases/download/esp-develop-8.2.0-20240122/qemu-xtensa-softmmu-esp_develop_8.2.0_20240122-x86_64-linux-gnu.tar.xz
  QEMU_MACOS_URL: https://github.com/espressif/qemu/releases/download/esp-develop-8.2.0-20240122/qemu-xtensa-softmmu-esp_develop_8.2.0_20240122-aarch64-apple-darwin.tar.xz
  QEMU_WINDOWS_URL: https://github.com/espressif/qemu/releases/download/esp-develop-8.2.0-20240122/qemu-xtensa-softmmu-esp_develop_8.2.0_20240122-x86_64-w64-mingw32.tar.xz


jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        run_supabase_tests: [ false ]
        include:
          - os: ubuntu-latest
            run_supabase_tests: false
            upload-service: true

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          # We have a test that wants to tag a specific commit.
          # As such we need to fetch all history.
          fetch-depth: 0

      - name: Setup environment variables and Toit version
        id: constants
        shell: bash
        run: |
          if [[ "$RUNNER_OS" = "Windows" ]]; then
            BIN_EXTENSION=".exe"
          fi
          echo "BIN_EXTENSION=$BIN_EXTENSION" >> $GITHUB_ENV

          export TOIT_VERSION=$(make dev-sdk-version)
          echo "toitVersion=$TOIT_VERSION" >> $GITHUB_OUTPUT

          # For upload at the end.
          # We only upload for Linux and macOS.
          echo "SNAPSHOTS_DIR=$HOME/.cache/jaguar/snapshots" >> $GITHUB_ENV

      - uses: toitlang/action-setup@v1
        id: setup-toit
        with:
          toit-version: ${{ steps.constants.outputs.toitVersion }}

      - name: HACK -- atch lib to allow changing the log target
        run: |
          SDK_PATH="${{ steps.setup-toit.outputs.toit-sdk-path }}"
          echo "SDK_PATH=$SDK_PATH"
          patch -p1 "$SDK_PATH" < toit-log.patch

      - name: Setup Qemu
        shell: bash
        run: |
          mkdir -p downloads
          cd downloads
          if [[ ${{ runner.os }} == "Linux" ]]; then
            curl -L -o qemu-linux.tar.xz $QEMU_LINUX_URL
            tar x -f qemu-linux.tar.xz
            echo "QEMU_EXEC=$PWD/qemu/bin/qemu-system-xtensa" >> $GITHUB_ENV
          elif [[ ${{ runner.os }} == "macOS" ]]; then
            curl -L -o qemu-macos.tar.xz $QEMU_MACOS_URL
            tar x -f qemu-macos.tar.xz
            echo "QEMU_EXEC=$PWD/qemu/bin/qemu-system-xtensa" >> $GITHUB_ENV
          elif [[ ${{ runner.os }} == "Windows" ]]; then
            curl -L -o qemu-windows.tar.xz $QEMU_WINDOWS_URL
            tar x -f qemu-windows.tar.xz
            echo "QEMU_EXEC=$PWD/qemu/bin/qemu-system-xtensa.exe" >> $GITHUB_ENV
          fi
          ls $QEMU_EXEC

      - name: Setup environment
        shell: bash
        run: |
          echo "ARTEMIS_CONFIG=${{ github.workspace }}/test_config" >> $GITHUB_ENV

      # Fetch the dependencies. Different for each platform.
      - name: Install dependencies - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y -q
          # sdl2 and libslirp are needed for Qemu.
          sudo apt-get install -y -q --no-install-recommends ninja-build libsdl2-2.0-0 libslirp0
          ninja --version
          cmake --version
      - name: Install dependencies - macOS
        if: runner.os == 'macOS'
        run: |
          # sdl2 and libslirp are needed for Qemu.
          brew install ninja sdl2 libslirp
          ninja --version
          cmake --version
      - name: Install dependencies - Windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          ninja --version
          cmake --version

      - name: Install Supabase
        if: matrix.run_supabase_tests
        uses: supabase/setup-cli@v1
        with:
          version: ${{ env.SUPABASE_VERSION }}

      - name: Start Supabase - Toitware
        if: matrix.run_supabase_tests
        shell: bash
        working-directory: ${{ github.workspace }}/supabase_artemis
        run: |
          supabase start -x "$EXCLUDED_SUPABASE_SERVICES"
          supabase status

          # Sample output of supabase status:
          # supabase local development setup is running.
          #
          #         API URL: http://localhost:54321
          #           DB URL: postgresql://postgres:postgres@localhost:54322/postgres
          #       Studio URL: http://localhost:54323
          #     Inbucket URL: http://localhost:54324
          #       JWT secret: super-secret-jwt-token-with-at-least-32-characters-long
          #         anon key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24ifQ.625_WdcF3KHqz5amU0x2X5WWHP-OEs_4qj0ssLNHzTs
          # service_role key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSJ9.vI9obAHOGyVVKa3pD--kJlyxp-Z2zV9UUMAhKpNLAcU

          API_URL_LINE=$(supabase status | grep "API URL:")
          API_URL=${API_URL_LINE#*API URL: }
          API_HOST=${API_URL#*http://}
          ANON_KEY_LINE=$(supabase status | grep "anon key:")
          ANON_KEY=${ANON_KEY_LINE#*anon key: }
          echo "SUPABASE_TOITWARE_API_HOST=$API_HOST" >> $GITHUB_ENV
          echo "SUPABASE_TOITWARE_ANON_KEY=$ANON_KEY" >> $GITHUB_ENV

      - name: Start Supabase - Broker
        if: matrix.run_supabase_tests
        shell: bash
        working-directory: ${{ github.workspace }}/public/supabase_broker
        run: |
          supabase start -x "$EXCLUDED_SUPABASE_SERVICES"
          supabase status

          API_URL_LINE=$(supabase status | grep "API URL:")
          API_URL=${API_URL_LINE#*API URL: }
          API_HOST=${API_URL#*http://}
          ANON_KEY_LINE=$(supabase status | grep "anon key:")
          ANON_KEY=${ANON_KEY_LINE#*anon key: }
          echo "SUPABASE_BROKER_API_HOST=$API_HOST" >> $GITHUB_ENV
          echo "SUPABASE_BROKER_ANON_KEY=$ANON_KEY" >> $GITHUB_ENV

      - name: Run cmake
        shell: bash
        run: |
          make rebuild-cmake
          cmake \
              -DQEMU_PATH="$QEMU_EXEC" \
              build

      - name: Build binaries
        shell: bash
        run: |
          make

      - name: Test supabase
        if: matrix.run_supabase_tests
        shell: bash
        run: |
          make reload-supabase-schemas
          make test-supabase

      - name: Test
        if: (!matrix.run_supabase_tests)
        shell: bash
        run: |
          make disable-supabase-tests
          make test

      - name: Upload service for Testing org
        if: |
          matrix.upload-service &&
          github.event_name == 'push' &&
          (github.ref == 'refs/heads/main' || github.event.inputs.upload-service == 'true')
        shell: bash
        env:
          ARTEMIS_EMAIL: leon@toit.io
          ARTEMIS_PASSWORD: ${{ secrets.LEON_ARTEMIS_PW }}
        run: |
          # We log in with the Artemis executable.
          # It will set the authentication in the config file which is also
          # used by the uploader.
          build/bin/artemis$BIN_EXTENSION auth login --email "$ARTEMIS_EMAIL" --password "$ARTEMIS_PASSWORD"

          SDK_VERSION=$(make dev-sdk-version)
          VERSION=$(cmake -DPRINT_VERSION=1 -P tools/gitversion.cmake)
          # It's hard to ensure that we don't upload a service with the same tag
          # as a release, and that would lead to trouble.
          # Add a T to indicate that this is a test version and avoid this problem.
          SERVICE_VERSION=$VERSION-T

          ARTEMIS_TESTING_ORGANIZATION=3ea5b632-5739-4f40-8446-2fc102a5b338

          build/bin/uploader service \
              --sdk-version $SDK_VERSION \
              --service-version $SERVICE_VERSION \
              --organization-id $ARTEMIS_TESTING_ORGANIZATION \
              --local

      - name: Upload binary artifacts
        if: (!matrix.run_supabase_tests)
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ runner.os }}
          path: build/bin

      - name: Upload snapshot artifacts
        # Use 'always()' to upload them even if an earlier step failed.
        if: (!matrix.run_supabase_tests) && always()
        uses: actions/upload-artifact@v4
        with:
          name: snapshots-${{ runner.os }}
          path: build/snapshots

      - name: Upload other snapshots
        # Use 'always()' to upload them even if an earlier step failed.
        if: (!matrix.run_supabase_tests) && (runner.os != 'Windows') && always()
        uses: actions/upload-artifact@v4
        with:
          name: other-snapshots-${{ runner.os }}
          path: ${{ env.SNAPSHOTS_DIR }}
