# Copyright (C) 2023 Toitware ApS. All rights reserved.

name: CI

on:
  push:

env:
  EXCLUDED_SUPABASE_SERVICES: imgproxy,inbucket,pgadmin-schema-diff,migra,studio,deno-relay

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          # We have a test that wants to tag a specific commit.
          # As such we need to fetch all history.
          fetch-depth: 0

      - name: Setup Toit
        shell: bash
        run: |
          if [[ "$RUNNER_OS" = "Windows" ]]; then
            BIN_EXTENSION=".exe"
          fi
          echo "BIN_EXTENSION=$BIN_EXTENSION" >> $GITHUB_ENV

          export TOIT_VERSION="v2.0.0-alpha.82"

          export NATIVE_DOWNLOAD_DIR="${{ github.workspace }}/downloads"
          echo "NATIVE_DOWNLOAD_DIR=$NATIVE_DOWNLOAD_DIR" >> $GITHUB_ENV

          export DOWNLOAD_DIR="$PWD/downloads"
          echo "DOWNLOAD_DIR=$DOWNLOAD_DIR" >> $GITHUB_ENV

          TOIT_SDK_DIR=$DOWNLOAD_DIR/toit
          echo "TOIT_EXEC=$TOIT_SDK_DIR/bin/toit.run$BIN_EXTENSION" >> $GITHUB_ENV
          echo "TOITC_EXEC=$TOIT_SDK_DIR/bin/toit.compile$BIN_EXTENSION" >> $GITHUB_ENV
          echo "TPKG_EXEC=$TOIT_SDK_DIR/bin/toit.pkg$BIN_EXTENSION" >> $GITHUB_ENV

          TOIT_SDK_FILE=toit-$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]').tar.gz
          TOIT_SDK_BASE_URL=https://github.com/toitlang/toit/releases

          echo "TOIT_SDK_URL=$TOIT_SDK_BASE_URL/download/$TOIT_VERSION/$TOIT_SDK_FILE" >> $GITHUB_ENV

      - uses: suisei-cn/actions-download-file@v1.3.0
        name: Download Toit
        with:
          url: ${{ env.TOIT_SDK_URL }}
          target: ${{ env.NATIVE_DOWNLOAD_DIR }}

      - name: Extract Toit
        shell: bash
        run: |
          cd "$DOWNLOAD_DIR"
          tar x -f *.tar.gz

      - name: Setup environment
        shell: bash
        run: |
          echo "ARTEMIS_CONFIG=${{ github.workspace }}/test_config" >> $GITHUB_ENV

      # Fetch the dependencies. Different for each platform.
      - name: Install dependencies - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          ninja --version
          cmake --version
      - name: Install dependencies - macOS
        if: runner.os == 'macOS'
        run: |
          brew install ninja
          ninja --version
          cmake --version
      - name: Install dependencies - Windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          ninja --version
          cmake --version

      - name: Install Supabase
        if: ${{ runner.os == 'Linux' }}
        uses: supabase/setup-cli@v1
        with:
          version: 1.42.4

      - name: Start Supabase - Toitware
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        working-directory: ${{ github.workspace }}/supabase_artemis
        run: |
          supabase start -x "$EXCLUDED_SUPABASE_SERVICES"
          supabase status

          # Sample output of supabase status:
          # supabase local development setup is running.
          #
          #         API URL: http://localhost:54321
          #           DB URL: postgresql://postgres:postgres@localhost:54322/postgres
          #       Studio URL: http://localhost:54323
          #     Inbucket URL: http://localhost:54324
          #       JWT secret: super-secret-jwt-token-with-at-least-32-characters-long
          #         anon key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24ifQ.625_WdcF3KHqz5amU0x2X5WWHP-OEs_4qj0ssLNHzTs
          # service_role key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSJ9.vI9obAHOGyVVKa3pD--kJlyxp-Z2zV9UUMAhKpNLAcU

          API_URL_LINE=$(supabase status | grep "API URL:")
          API_URL=${API_URL_LINE#*API URL: }
          API_HOST=${API_URL#*http://}
          ANON_KEY_LINE=$(supabase status | grep "anon key:")
          ANON_KEY=${ANON_KEY_LINE#*anon key: }
          echo "SUPABASE_TOITWARE_API_HOST=$API_HOST" >> $GITHUB_ENV
          echo "SUPABASE_TOITWARE_ANON_KEY=$ANON_KEY" >> $GITHUB_ENV

      - name: Start Supabase - Broker
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        working-directory: ${{ github.workspace }}/supabase_broker
        run: |
          supabase start -x "$EXCLUDED_SUPABASE_SERVICES"
          supabase status

          API_URL_LINE=$(supabase status | grep "API URL:")
          API_URL=${API_URL_LINE#*API URL: }
          API_HOST=${API_URL#*http://}
          ANON_KEY_LINE=$(supabase status | grep "anon key:")
          ANON_KEY=${ANON_KEY_LINE#*anon key: }
          echo "SUPABASE_BROKER_API_HOST=$API_HOST" >> $GITHUB_ENV
          echo "SUPABASE_BROKER_ANON_KEY=$ANON_KEY" >> $GITHUB_ENV

      - name: Run cmake
        shell: bash
        run: |
          make rebuild-cmake
          cmake -DTOITC="$TOITC_EXEC" -DTOITPKG="$TPKG_EXEC" -DTOITRUN="$TOIT_EXEC" build

      - name: Disable Supabase tests - Windows and macOS
        if: runner.os != 'Linux'
        shell: bash
        run: |
          make disable-supabase-tests

      - name: Build binaries
        shell: bash
        run: |
          make TOITRUN="$TOIT_EXEC"

      - name: Test
        shell: bash
        run: |
          make TOITRUN="$TOIT_EXEC" test

      - name: Upload service for Testing org
        if: runner.os == 'Linux' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        shell: bash
        env:
          ARTEMIS_EMAIL: leon@toit.io
          ARTEMIS_PASSWORD: ${{ secrets.LEON_ARTEMIS_PW }}
        run: |
          # We log in with the Artemis executable.
          # It will set the authentication in the config file which is also
          # used by the uploader.
          build/bin/artemis$BIN_EXTENSION auth login --email "$ARTEMIS_EMAIL" --password "$ARTEMIS_PASSWORD"

          SDK_VERSION=$(make dev-sdk-version)
          VERSION=$(cmake -DPRINT_VERSION=1 -P tools/gitversion.cmake)
          # It's hard to ensure that we don't upload a service with the same tag
          # as a release, and that would lead to trouble.
          # Add a T to indicate that this is a test version and avoid this problem.
          SERVICE_VERSION=$VERSION-T

          ARTEMIS_TESTING_ORGANIZATION=3ea5b632-5739-4f40-8446-2fc102a5b338

          build/bin/uploader service \
              --sdk-version $SDK_VERSION \
              --service-version $SERVICE_VERSION \
              --organization-id $ARTEMIS_TESTING_ORGANIZATION \
              --local

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ runner.os }}
          path: build/bin

      - name: Upload snapshot artifacts
        uses: actions/upload-artifact@v3
        with:
          name: snapshots-${{ runner.os }}
          path: build/snapshots
