# Copyright (C) 2023 Toitware ApS. All rights reserved.

name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - "*"
      - "*/*"

env:
  EXCLUDED_SUPABASE_SERVICES: imgproxy,inbucket,pgadmin-schema-diff,migra,studio,deno-relay

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        arch: [ amd64 ]
        include:
          - os: ubuntu-latest
            arch: amd64
            run_supabase_tests: true
          - os: ubuntu-latest
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          # We have a test that wants to tag a specific commit.
          # As such we need to fetch all history.
          fetch-depth: 0

      - name: Setup Toit
        id: constants
        shell: bash
        run: |
          if [[ "$RUNNER_OS" = "Windows" ]]; then
            BIN_EXTENSION=".exe"
          fi
          echo "BIN_EXTENSION=$BIN_EXTENSION" >> $GITHUB_ENV

          export TOIT_VERSION=$(make dev-sdk-version)
          echo "TOIT_VERSION=$TOIT_VERSION" >> $GITHUB_ENV
          echo "toitVersion=$TOIT_VERSION" >> $GITHUB_OUTPUT

          # For upload at the end.
          # We only upload for Linux and macOS.
          echo "SNAPSHOTS_DIR=$HOME/.cache/jaguar/snapshots" >> $GITHUB_ENV

      - uses: toitlang/action-setup@v1
        with:
          toit-version: ${{ steps.constants.outputs.toitVersion }}

      - name: Setup Qemu
        # TODO(florian): Enable again when Windows tests work again.
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p downloads
          cd downloads
          curl -L  -o qemu-${{ runner.os }}.tar.gz https://github.com/toitlang/qemu/releases/download/v0.0.3/qemu-${{ runner.os }}.tar.gz
          tar x -f qemu-${{ runner.os }}.tar.gz
          echo "QEMU_EXEC=${{ github.workspace }}/downloads/qemu-${{ runner.os }}/qemu-system-xtensa$BIN_EXTENSION" >> $GITHUB_ENV
          ls $QEMU_EXEC

      - name: Setup environment
        shell: bash
        run: |
          echo "ARTEMIS_CONFIG=${{ github.workspace }}/test_config" >> $GITHUB_ENV

      # Fetch the dependencies. Different for each platform.
      - name: Install dependencies - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          ninja --version
          cmake --version
      - name: Install dependencies - macOS
        if: runner.os == 'macOS'
        run: |
          brew install ninja
          ninja --version
          cmake --version
      - name: Install dependencies - Windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          ninja --version
          cmake --version

      - name: Install Supabase
        if: matrix.run_supabase_tests
        uses: supabase/setup-cli@v1
        with:
          version: 1.145.6

      - name: Start Supabase - Toitware
        if: matrix.run_supabase_tests
        shell: bash
        working-directory: ${{ github.workspace }}/supabase_artemis
        run: |
          supabase start -x "$EXCLUDED_SUPABASE_SERVICES"
          supabase status

          # Sample output of supabase status:
          # supabase local development setup is running.
          #
          #         API URL: http://localhost:54321
          #           DB URL: postgresql://postgres:postgres@localhost:54322/postgres
          #       Studio URL: http://localhost:54323
          #     Inbucket URL: http://localhost:54324
          #       JWT secret: super-secret-jwt-token-with-at-least-32-characters-long
          #         anon key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24ifQ.625_WdcF3KHqz5amU0x2X5WWHP-OEs_4qj0ssLNHzTs
          # service_role key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSJ9.vI9obAHOGyVVKa3pD--kJlyxp-Z2zV9UUMAhKpNLAcU

          API_URL_LINE=$(supabase status | grep "API URL:")
          API_URL=${API_URL_LINE#*API URL: }
          API_HOST=${API_URL#*http://}
          ANON_KEY_LINE=$(supabase status | grep "anon key:")
          ANON_KEY=${ANON_KEY_LINE#*anon key: }
          echo "SUPABASE_TOITWARE_API_HOST=$API_HOST" >> $GITHUB_ENV
          echo "SUPABASE_TOITWARE_ANON_KEY=$ANON_KEY" >> $GITHUB_ENV

      - name: Start Supabase - Broker
        if: matrix.run_supabase_tests
        shell: bash
        working-directory: ${{ github.workspace }}/public/supabase_broker
        run: |
          supabase start -x "$EXCLUDED_SUPABASE_SERVICES"
          supabase status

          API_URL_LINE=$(supabase status | grep "API URL:")
          API_URL=${API_URL_LINE#*API URL: }
          API_HOST=${API_URL#*http://}
          ANON_KEY_LINE=$(supabase status | grep "anon key:")
          ANON_KEY=${ANON_KEY_LINE#*anon key: }
          echo "SUPABASE_BROKER_API_HOST=$API_HOST" >> $GITHUB_ENV
          echo "SUPABASE_BROKER_ANON_KEY=$ANON_KEY" >> $GITHUB_ENV

      - name: Run cmake
        shell: bash
        run: |
          make rebuild-cmake
          cmake \
              -DQEMU_PATH="$QEMU_EXEC" \
              build

      - name: Disable Supabase tests - Windows and macOS
        if: runner.os != 'Linux' || matrix.arch != 'amd64'
        shell: bash
        run: |
          make disable-supabase-tests

      - name: Disable Qemu tests - Windows
        # TODO(florian): Figure out why the qemu tests fail on Windows.
        if: runner.os == 'Windows'
        shell: bash
        run: |
          make disable-qemu-tests

      - name: Configure arm64
        if: matrix.arch == 'arm64'
        shell: bash
        run: |
          cmake -B build -DARTEMIS_ARCH=arm64 -DARTEMIS_OS=linux

      - name: Build binaries
        shell: bash
        run: |
          make

      - name: Force schema reload
        if: matrix.run_supabase_tests
        shell: bash
        run: |
            make reload-supabase-schemas

      - name: Test
        if: matrix.arch != 'arm64'
        shell: bash
        run: |
          make test

      - name: Start http-servers - arm64
        if: matrix.arch == 'arm64'
        shell: bash
        run: |
          make start-http &
          echo "HTTP_PID=$!" >> $GITHUB_ENV
          sleep 10
          make setup-local-dev
          mkdir -p $HOME/.config/artemis
          cp $HOME/.config/artemis-dev/config config

      - name: Test executables 64-bit
        if: matrix.arch == 'arm64'
        uses: pguyot/arm-runner-action@v2
        with:
          cpu: cortex-a7
          base_image: "raspios_lite_arm64:2022-01-28"
          image_additional_mb: 500
          commands: |
              uname -m
              export HOME=$(pwd)
              export ARTEMIS_CONFIG=$HOME/config
              build/bin/artemis --version
              mkdir fleet
              export ARTEMIS_FLEET_ROOT=$PWD/fleet
              build/bin/artemis fleet init
              build/bin/artemis pod build -o test.pod fleet/my-pod.yaml

      - name: Kill http-servers
        if: matrix.arch == 'arm64'
        shell: bash
        run: |
          kill $HTTP_PID

      - name: Upload service for Testing org
        if: |
          runner.os == 'Linux' &&
          matrix.arch == 'amd64' &&
          github.event_name == 'push' &&
          github.ref == 'refs/heads/v0.17.1'
        shell: bash
        env:
          ARTEMIS_EMAIL: leon@toit.io
          ARTEMIS_PASSWORD: ${{ secrets.LEON_ARTEMIS_PW }}
        run: |
          # We log in with the Artemis executable.
          # It will set the authentication in the config file which is also
          # used by the uploader.
          build/bin/artemis$BIN_EXTENSION auth login --email "$ARTEMIS_EMAIL" --password "$ARTEMIS_PASSWORD"

          SDK_VERSION=$(make dev-sdk-version)
          VERSION=$(cmake -DPRINT_VERSION=1 -P tools/gitversion.cmake)
          # It's hard to ensure that we don't upload a service with the same tag
          # as a release, and that would lead to trouble.
          # Add a T to indicate that this is a test version and avoid this problem.
          SERVICE_VERSION=$VERSION-T

          ARTEMIS_TESTING_ORGANIZATION=3ea5b632-5739-4f40-8446-2fc102a5b338

          build/bin/uploader service \
              --sdk-version $SDK_VERSION \
              --service-version $SERVICE_VERSION \
              --organization-id $ARTEMIS_TESTING_ORGANIZATION \
              --local

      - name: Upload binary artifacts
        if: matrix.arch != 'arm64'
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ runner.os }}
          path: build/bin

      - name: Upload snapshot artifacts
        # Use 'always()' to upload them even if an earlier step failed.
        if: matrix.arch != 'arm64' && always()
        uses: actions/upload-artifact@v4
        with:
          name: snapshots-${{ runner.os }}
          path: build/snapshots

      - name: Upload other snapshots
        # Use 'always()' to upload them even if an earlier step failed.
        if: (matrix.arch != 'arm64') && (runner.os != 'Windows') && always()
        uses: actions/upload-artifact@v4
        with:
          name: other-snapshots-${{ runner.os }}
          path: ${{ env.SNAPSHOTS_DIR }}

  serial:
    runs-on: self-linux

    steps:
      - name: Clean workspace
        run: |
          rm -rf ${{ github.workspace }}/*

      - uses: actions/checkout@v4

      # Downloads the SDK that is defined in the Makefile
      # Reuses the SDK if it's already downloaded.
      - name: Setup Toit SDK
        run: |
          SDK_VERSION=$(make dev-sdk-version)
          TOIT_SDK=$HOME/.cache/artemis/sdks/$SDK_VERSION

          # Check whether the SDK is already downloaded.
          if [[ -d $TOIT_SDK ]]; then
            echo "SDK already downloaded."
          else
            mkdir -p $HOME/.cache/artemis/sdks
            wget https://github.com/toitlang/toit/releases/download/$SDK_VERSION/toit-linux.tar.gz
            tar x -zf toit-linux.tar.gz
            mv toit $TOIT_SDK
          fi
          echo "SDK_VERSION=$SDK_VERSION" >> $GITHUB_ENV
          echo "TOIT_SDK=$TOIT_SDK" >> $GITHUB_ENV
          echo "TOIT_EXEC=$TOIT_SDK/bin/toit.run" >> $GITHUB_ENV
          echo "TOITC_EXEC=$TOIT_SDK/bin/toit.compile" >> $GITHUB_ENV
          echo "TPKG_EXEC=$TOIT_SDK/bin/toit.pkg" >> $GITHUB_ENV

      - name: Run cmake
        shell: bash
        run: |
          make rebuild-cmake
          cmake \
              -DTOITC="$TOITC_EXEC" \
              -DTOITPKG="$TPKG_EXEC" \
              -DTOITRUN="$TOIT_EXEC" \
              build

      # The SDK is already downloaded, but we might still need envelopes.
      - name: Download envelopes
        run: |
          make TOITRUN=$TOIT_EXEC download-sdk

      - name: Disable Supabase tests
        run: |
          make TOITRUN=$TOIT_EXEC disable-supabase-tests

      - name: Disable QEMU tests
        run: |
          make TOITRUN=$TOIT_EXEC disable-qemu-tests

      - name: Build
        run: |
          make TOITRUN=$TOIT_EXEC

      - name: Run serial tests
        run: |
          export ARTEMIS_TEST_SERIAL_PORT=/dev/ttyUSB0
          export ARTEMIS_TEST_WIFI_SSID=jaguar
          export ARTEMIS_TEST_WIFI_PASSWORD=toittoit
          make TOITRUN=$TOIT_EXEC serial-test

      # Erase the flash of the device.
      # We don't want it to behave erratically against the WiFi hotspot,
      # which could make future tests fail more easily.
      - name: Erase device flash
        if: always()
        run: |
          $TOIT_SDK/tools/esptool --port /dev/ttyUSB0 erase_flash
