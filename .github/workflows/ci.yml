name: CI

on:
  push:
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        # Windows is not yet supported.
        # Avoid tests on macos for now. They are expensive.
        os: [ ubuntu-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          # We have a test that wants to tag a specific commit.
          # As such we need to fetch all history.
          fetch-depth: 0

      - name: Setup Jaguar and Toit
        shell: bash
        run: |
          if [[ "$RUNNER_OS" = "Windows" ]]; then
            BIN_EXTENSION=".exe"
          fi

          JAGUAR_VERSION=v1.8.7
          export "JAGUAR_VERSION=${JAGUAR_VERSION}"

          TOIT_SDK_DIR=$HOME/.cache/jaguar/sdk
          echo "TOIT_EXEC=$TOIT_SDK_DIR/bin/toit.run$BIN_EXTENSION" >> $GITHUB_ENV
          echo "TOITC_EXEC=$TOIT_SDK_DIR/bin/toit.compile$BIN_EXTENSION" >> $GITHUB_ENV
          echo "TPKG_EXEC=$TOIT_SDK_DIR/bin/toit.pkg$BIN_EXTENSION" >> $GITHUB_ENV

          export DOWNLOAD_DIR="${{ github.workspace }}/downloads"
          echo "DOWNLOAD_DIR=$DOWNLOAD_DIR" >> $GITHUB_ENV

          if [[ "$RUNNER_OS" = "Linux" ]]; then
            JAGUAR_FILE=jag_linux.tgz
          elif [[ "$RUNNER_OS" = "macOS" ]]; then
            JAGUAR_FILE=jag_macos.zip
          elif [[ "$RUNNER_OS" = "Windows" ]]; then
            JAGUAR_FILE=jag_windows.zip
          else
            echo "UNSUPPORTED RUNNER: $RUNNER_OS"
            exit 1
          fi

          JAGUAR_BASE_URL=https://github.com/toitlang/jaguar/releases

          if [[ $JAGUAR_VERSION = latest ]]; then
            echo "JAGUAR_URL=$JAGUAR_BASE_URL/latest/download/$JAGUAR_FILE" >> $GITHUB_ENV
          else
            echo "JAGUAR_URL=$JAGUAR_BASE_URL/download/$JAGUAR_VERSION/$JAGUAR_FILE" >> $GITHUB_ENV
          fi

      - name: Setup environment
        shell: bash
        run: |
          echo "ARTEMIS_CONFIG=${{ github.workspace }}/test_config" >> $GITHUB_ENV

      # Fetch the dependencies. Different for each platform.
      - name: Install dependencies - Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build mosquitto
          ninja --version
          cmake --version
      - name: Install dependencies - macOS
        if: runner.os == 'macOS'
        run: |
          brew install ninja
          ninja --version
          cmake --version
      - name: Install dependencies - Windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          ninja --version
          cmake --version

      - name: Install Supabase
        uses: supabase/setup-cli@v1
        with:
          version: 1.30.0

      - name: Start Supabase - Toitware
        shell: bash
        working-directory: ${{ github.workspace }}/supabase_artemis
        run: |
          supabase start
          supabase status

          # Sample output of supabase status:
          # supabase local development setup is running.
          #
          #         API URL: http://localhost:54321
          #           DB URL: postgresql://postgres:postgres@localhost:54322/postgres
          #       Studio URL: http://localhost:54323
          #     Inbucket URL: http://localhost:54324
          #       JWT secret: super-secret-jwt-token-with-at-least-32-characters-long
          #         anon key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24ifQ.625_WdcF3KHqz5amU0x2X5WWHP-OEs_4qj0ssLNHzTs
          # service_role key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSJ9.vI9obAHOGyVVKa3pD--kJlyxp-Z2zV9UUMAhKpNLAcU

          API_URL_LINE=$(supabase status | grep "API URL:")
          API_URL=${API_URL_LINE#*API URL: }
          API_HOST=${API_URL#*http://}
          ANON_KEY_LINE=$(supabase status | grep "anon key:")
          ANON_KEY=${ANON_KEY_LINE#*anon key: }
          echo "SUPABASE_TOITWARE_API_HOST=$API_HOST" >> $GITHUB_ENV
          echo "SUPABASE_TOITWARE_ANON_KEY=$ANON_KEY" >> $GITHUB_ENV

      - name: Start Supabase - Customer
        shell: bash
        working-directory: ${{ github.workspace }}/tests/supabase_customer
        run: |
          supabase start
          supabase status

          API_URL_LINE=$(supabase status | grep "API URL:")
          API_URL=${API_URL_LINE#*API URL: }
          API_HOST=${API_URL#*http://}
          ANON_KEY_LINE=$(supabase status | grep "anon key:")
          ANON_KEY=${ANON_KEY_LINE#*anon key: }
          echo "SUPABASE_CUSTOMER_API_HOST=$API_HOST" >> $GITHUB_ENV
          echo "SUPABASE_CUSTOMER_ANON_KEY=$ANON_KEY" >> $GITHUB_ENV

      - name: Start Supabase - Supabase test
        shell: bash
        working-directory: ${{ github.workspace }}/tests/supabase_test
        run: |
          supabase start
          supabase status

      - uses: suisei-cn/actions-download-file@v1.3.0
        name: Download Toit
        with:
          url: ${{ env.JAGUAR_URL }}
          target: ${{ env.DOWNLOAD_DIR }}

      - name: Extract Jaguar - Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          cd "$DOWNLOAD_DIR"
          tar x -f *.tgz
      - name: Extract Jaguar - macOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          cd "$DOWNLOAD_DIR"
          unzip *.zip
      - name: Extract Jaguar - Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          cd "$DOWNLOAD_DIR"
          unzip *.zip

      - name: Setup Jaguar
        run: |
          cd "$DOWNLOAD_DIR"
          ./jag config analytics disable
          ./jag setup --no-analytics

      - name: Run cmake
        shell: bash
        run: |
          make rebuild-cmake
          cmake -DTOITC="$TOITC_EXEC" -DTOITPKG="$TPKG_EXEC" -DTOITRUN="$TOIT_EXEC" build

      - name: Install packages
        run: |
          make install-pkgs

      - name: Setup local brokers
        shell: bash
        run: |
          $TOIT_EXEC src/cli/cli.toit config broker add supabase "test-toitware" \
            $SUPABASE_TOITWARE_API_HOST $SUPABASE_TOITWARE_ANON_KEY
          $TOIT_EXEC src/cli/cli.toit config broker add supabase "test-customer" \
            $SUPABASE_CUSTOMER_API_HOST $SUPABASE_CUSTOMER_ANON_KEY
          cat $ARTEMIS_CONFIG

      - name: Test
        run: |
          make test
