// Code generated by protoc-gen-toit. DO NOT EDIT.
// source: api/event.proto

import protobuf as _protobuf
import core as _core
import protobuf.protogen.google.protobuf.duration_pb as _duration
import protobuf.protogen.google.protobuf.timestamp_pb as _timestamp
import ..api.pubsub_pb as _pubsub

// ENUM START: LogLevel
LogLevel_LOG_LEVEL_PRINT/int/*enum<LogLevel>*/ ::= 0
LogLevel_LOG_LEVEL_DEBUG/int/*enum<LogLevel>*/ ::= 1
LogLevel_LOG_LEVEL_INFO/int/*enum<LogLevel>*/ ::= 2
LogLevel_LOG_LEVEL_WARN/int/*enum<LogLevel>*/ ::= 3
LogLevel_LOG_LEVEL_ERROR/int/*enum<LogLevel>*/ ::= 4
LogLevel_LOG_LEVEL_FATAL/int/*enum<LogLevel>*/ ::= 5
// ENUM END: .api.LogLevel

// ENUM START: MetricLevel
MetricLevel_METRIC_LEVEL_DEBUG/int/*enum<MetricLevel>*/ ::= 0
MetricLevel_METRIC_LEVEL_INFO/int/*enum<MetricLevel>*/ ::= 5
MetricLevel_METRIC_LEVEL_CRITICAL/int/*enum<MetricLevel>*/ ::= 10
// ENUM END: .api.MetricLevel

// MESSAGE START: .api.Events
class Events extends _protobuf.Message:
  job_id/ByteArray := ByteArray 0
  events/List/*<Event>*/ := []

  constructor
      --job_id/ByteArray?=null
      --events/List?/*<Event>*/=null:
    if job_id != null:
      this.job_id = job_id
    if events != null:
      this.events = events

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        job_id = r.read_primitive _protobuf.PROTOBUF_TYPE_BYTES
      r.read_field 2:
        events = r.read_array _protobuf.PROTOBUF_TYPE_MESSAGE events:
          Event.deserialize r

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    w.write_primitive _protobuf.PROTOBUF_TYPE_BYTES job_id --as_field=1
    w.write_array _protobuf.PROTOBUF_TYPE_MESSAGE events --as_field=2: | value/Event | 
      value.serialize w

  num_fields_set -> int:
    return (job_id.is_empty ? 0 : 1)
      + (events.is_empty ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_BYTES job_id --as_field=1)
      + (_protobuf.size_array _protobuf.PROTOBUF_TYPE_MESSAGE events --as_field=2)

// MESSAGE END: .api.Events

// MESSAGE START: .api.Event
class Event extends _protobuf.Message:
  // ONEOF START: .api.Event.event
  event_ := null
  event_oneof_case_/int? := null

  event_oneof_clear -> none:
    event_ = null
    event_oneof_case_ = null

  static EVENT_METRICS/int ::= 2
  static EVENT_LOG/int ::= 3
  static EVENT_PUBSUB/int ::= 4
  static EVENT_SYSTEM/int ::= 5

  event_oneof_case -> int?:
    return event_oneof_case_

  event_metrics -> MetricsEvent:
    return event_

  event_metrics= event/MetricsEvent -> none:
    event_ = event
    event_oneof_case_ = EVENT_METRICS

  event_log -> LogEvent:
    return event_

  event_log= event/LogEvent -> none:
    event_ = event
    event_oneof_case_ = EVENT_LOG

  event_pubsub -> PubSubEvent:
    return event_

  event_pubsub= event/PubSubEvent -> none:
    event_ = event
    event_oneof_case_ = EVENT_PUBSUB

  event_system -> SystemEvent:
    return event_

  event_system= event/SystemEvent -> none:
    event_ = event
    event_oneof_case_ = EVENT_SYSTEM

  // ONEOF END: .api.Event.event
  created/_core.Time := _protobuf.TIME_ZERO_EPOCH

  constructor
      --created/_core.Time?=null
      --event_metrics/MetricsEvent?=null
      --event_log/LogEvent?=null
      --event_pubsub/PubSubEvent?=null
      --event_system/SystemEvent?=null:
    if created != null:
      this.created = created
    if event_metrics != null:
      this.event_metrics = event_metrics
    if event_log != null:
      this.event_log = event_log
    if event_pubsub != null:
      this.event_pubsub = event_pubsub
    if event_system != null:
      this.event_system = event_system

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        created = _protobuf.deserialize_timestamp r
      r.read_field 2:
        event_metrics = MetricsEvent.deserialize r
      r.read_field 3:
        event_log = LogEvent.deserialize r
      r.read_field 4:
        event_pubsub = PubSubEvent.deserialize r
      r.read_field 5:
        event_system = SystemEvent.deserialize r

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    _protobuf.serialize_timestamp created w --as_field=1
    if event_oneof_case_ == EVENT_METRICS:
      event_.serialize w --as_field=EVENT_METRICS --oneof
    if event_oneof_case_ == EVENT_LOG:
      event_.serialize w --as_field=EVENT_LOG --oneof
    if event_oneof_case_ == EVENT_PUBSUB:
      event_.serialize w --as_field=EVENT_PUBSUB --oneof
    if event_oneof_case_ == EVENT_SYSTEM:
      event_.serialize w --as_field=EVENT_SYSTEM --oneof

  num_fields_set -> int:
    return (event_oneof_case_ == null ? 0 : 1)
      + ((_protobuf.time_is_zero_epoch created) ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_timestamp created --as_field=1)
      + (event_oneof_case_ == EVENT_METRICS ? (_protobuf.size_embedded_message (event_metrics.protobuf_size) --as_field=2) : 0)
      + (event_oneof_case_ == EVENT_LOG ? (_protobuf.size_embedded_message (event_log.protobuf_size) --as_field=3) : 0)
      + (event_oneof_case_ == EVENT_PUBSUB ? (_protobuf.size_embedded_message (event_pubsub.protobuf_size) --as_field=4) : 0)
      + (event_oneof_case_ == EVENT_SYSTEM ? (_protobuf.size_embedded_message (event_system.protobuf_size) --as_field=5) : 0)

// MESSAGE END: .api.Event

// MESSAGE START: .api.MetricsEvent
// MESSAGE START: .api.MetricsEvent.Name
class MetricsEvent_Name extends _protobuf.Message:
  // ONEOF START: .api.MetricsEvent.Name.value
  value_ := null
  value_oneof_case_/int? := null

  value_oneof_clear -> none:
    value_ = null
    value_oneof_case_ = null

  static VALUE_STR/int ::= 1

  value_oneof_case -> int?:
    return value_oneof_case_

  value_str -> string:
    return value_

  value_str= value/string -> none:
    value_ = value
    value_oneof_case_ = VALUE_STR

  // ONEOF END: .api.MetricsEvent.Name.value

  constructor
      --value_str/string?=null:
    if value_str != null:
      this.value_str = value_str

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        value_str = r.read_primitive _protobuf.PROTOBUF_TYPE_STRING

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    if value_oneof_case_ == VALUE_STR:
      w.write_primitive _protobuf.PROTOBUF_TYPE_STRING value_ --as_field=VALUE_STR --oneof

  num_fields_set -> int:
    return (value_oneof_case_ == null ? 0 : 1)

  protobuf_size -> int:
    return (value_oneof_case_ == VALUE_STR ? (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_STRING value_str --as_field=1) : 0)

// MESSAGE END: .api.MetricsEvent.Name

class MetricsEvent extends _protobuf.Message:
  names/List/*<MetricsEvent_Name>*/ := []
  metrics/List/*<Metric>*/ := []

  constructor
      --names/List?/*<MetricsEvent_Name>*/=null
      --metrics/List?/*<Metric>*/=null:
    if names != null:
      this.names = names
    if metrics != null:
      this.metrics = metrics

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        names = r.read_array _protobuf.PROTOBUF_TYPE_MESSAGE names:
          MetricsEvent_Name.deserialize r
      r.read_field 2:
        metrics = r.read_array _protobuf.PROTOBUF_TYPE_MESSAGE metrics:
          Metric.deserialize r

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    w.write_array _protobuf.PROTOBUF_TYPE_MESSAGE names --as_field=1: | value/MetricsEvent_Name | 
      value.serialize w
    w.write_array _protobuf.PROTOBUF_TYPE_MESSAGE metrics --as_field=2: | value/Metric | 
      value.serialize w

  num_fields_set -> int:
    return (names.is_empty ? 0 : 1)
      + (metrics.is_empty ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_array _protobuf.PROTOBUF_TYPE_MESSAGE names --as_field=1)
      + (_protobuf.size_array _protobuf.PROTOBUF_TYPE_MESSAGE metrics --as_field=2)

// MESSAGE END: .api.MetricsEvent

// MESSAGE START: .api.Metric
// MESSAGE START: .api.Metric.Histogram
class Metric_Histogram extends _protobuf.Message:
  values/Map/*<int,float>*/ := {:}

  constructor
      --values/Map?/*<int,float>*/=null:
    if values != null:
      this.values = values

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        values = r.read_map values
          :
            r.read_primitive _protobuf.PROTOBUF_TYPE_UINT32
          :
            r.read_primitive _protobuf.PROTOBUF_TYPE_DOUBLE

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    w.write_map _protobuf.PROTOBUF_TYPE_UINT32 _protobuf.PROTOBUF_TYPE_DOUBLE values --as_field=1
      : | key/int | 
        w.write_primitive _protobuf.PROTOBUF_TYPE_UINT32 key
      : | value/float | 
        w.write_primitive _protobuf.PROTOBUF_TYPE_DOUBLE value

  num_fields_set -> int:
    return (values.is_empty ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_map _protobuf.PROTOBUF_TYPE_UINT32 _protobuf.PROTOBUF_TYPE_DOUBLE values --as_field=1)

// MESSAGE END: .api.Metric.Histogram

class Metric extends _protobuf.Message:
  // ONEOF START: .api.Metric.value
  value_ := null
  value_oneof_case_/int? := null

  value_oneof_clear -> none:
    value_ = null
    value_oneof_case_ = null

  static VALUE_GAUGE/int ::= 4
  static VALUE_COUNTER/int ::= 5
  static VALUE_HISOGRAM/int ::= 6

  value_oneof_case -> int?:
    return value_oneof_case_

  value_gauge -> float:
    return value_

  value_gauge= value/float -> none:
    value_ = value
    value_oneof_case_ = VALUE_GAUGE

  value_counter -> int:
    return value_

  value_counter= value/int -> none:
    value_ = value
    value_oneof_case_ = VALUE_COUNTER

  value_hisogram -> Metric_Histogram:
    return value_

  value_hisogram= value/Metric_Histogram -> none:
    value_ = value
    value_oneof_case_ = VALUE_HISOGRAM

  // ONEOF END: .api.Metric.value
  names_index/List/*<int>*/ := []
  tags/Map/*<int,int>*/ := {:}
  level/int/*enum<MetricLevel>*/ := 0

  constructor
      --names_index/List?/*<int>*/=null
      --tags/Map?/*<int,int>*/=null
      --level/int?/*enum<MetricLevel>?*/=null
      --value_gauge/float?=null
      --value_counter/int?=null
      --value_hisogram/Metric_Histogram?=null:
    if names_index != null:
      this.names_index = names_index
    if tags != null:
      this.tags = tags
    if level != null:
      this.level = level
    if value_gauge != null:
      this.value_gauge = value_gauge
    if value_counter != null:
      this.value_counter = value_counter
    if value_hisogram != null:
      this.value_hisogram = value_hisogram

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        names_index = r.read_array _protobuf.PROTOBUF_TYPE_UINT32 names_index:
          r.read_primitive _protobuf.PROTOBUF_TYPE_UINT32
      r.read_field 2:
        tags = r.read_map tags
          :
            r.read_primitive _protobuf.PROTOBUF_TYPE_UINT32
          :
            r.read_primitive _protobuf.PROTOBUF_TYPE_UINT32
      r.read_field 3:
        level = r.read_primitive _protobuf.PROTOBUF_TYPE_ENUM
      r.read_field 4:
        value_gauge = r.read_primitive _protobuf.PROTOBUF_TYPE_DOUBLE
      r.read_field 5:
        value_counter = r.read_primitive _protobuf.PROTOBUF_TYPE_INT64
      r.read_field 6:
        value_hisogram = Metric_Histogram.deserialize r

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    w.write_array _protobuf.PROTOBUF_TYPE_UINT32 names_index --as_field=1: | value/int | 
      w.write_primitive _protobuf.PROTOBUF_TYPE_UINT32 value --in_array
    w.write_map _protobuf.PROTOBUF_TYPE_UINT32 _protobuf.PROTOBUF_TYPE_UINT32 tags --as_field=2
      : | key/int | 
        w.write_primitive _protobuf.PROTOBUF_TYPE_UINT32 key
      : | value/int | 
        w.write_primitive _protobuf.PROTOBUF_TYPE_UINT32 value
    w.write_primitive _protobuf.PROTOBUF_TYPE_ENUM level --as_field=3
    if value_oneof_case_ == VALUE_GAUGE:
      w.write_primitive _protobuf.PROTOBUF_TYPE_DOUBLE value_ --as_field=VALUE_GAUGE --oneof
    if value_oneof_case_ == VALUE_COUNTER:
      w.write_primitive _protobuf.PROTOBUF_TYPE_INT64 value_ --as_field=VALUE_COUNTER --oneof
    if value_oneof_case_ == VALUE_HISOGRAM:
      value_.serialize w --as_field=VALUE_HISOGRAM --oneof

  num_fields_set -> int:
    return (value_oneof_case_ == null ? 0 : 1)
      + (names_index.is_empty ? 0 : 1)
      + (tags.is_empty ? 0 : 1)
      + (level == 0 ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_array _protobuf.PROTOBUF_TYPE_UINT32 names_index --as_field=1)
      + (_protobuf.size_map _protobuf.PROTOBUF_TYPE_UINT32 _protobuf.PROTOBUF_TYPE_UINT32 tags --as_field=2)
      + (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_ENUM level --as_field=3)
      + (value_oneof_case_ == VALUE_GAUGE ? (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_DOUBLE value_gauge --as_field=4) : 0)
      + (value_oneof_case_ == VALUE_COUNTER ? (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_INT64 value_counter --as_field=5) : 0)
      + (value_oneof_case_ == VALUE_HISOGRAM ? (_protobuf.size_embedded_message (value_hisogram.protobuf_size) --as_field=6) : 0)

// MESSAGE END: .api.Metric

// MESSAGE START: .api.LogEvent
// MESSAGE START: .api.LogEvent.LogValue
class LogEvent_LogValue extends _protobuf.Message:
  // ONEOF START: .api.LogEvent.LogValue.value
  value_ := null
  value_oneof_case_/int? := null

  value_oneof_clear -> none:
    value_ = null
    value_oneof_case_ = null

  static VALUE_STR/int ::= 1

  value_oneof_case -> int?:
    return value_oneof_case_

  value_str -> string:
    return value_

  value_str= value/string -> none:
    value_ = value
    value_oneof_case_ = VALUE_STR

  // ONEOF END: .api.LogEvent.LogValue.value

  constructor
      --value_str/string?=null:
    if value_str != null:
      this.value_str = value_str

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        value_str = r.read_primitive _protobuf.PROTOBUF_TYPE_STRING

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    if value_oneof_case_ == VALUE_STR:
      w.write_primitive _protobuf.PROTOBUF_TYPE_STRING value_ --as_field=VALUE_STR --oneof

  num_fields_set -> int:
    return (value_oneof_case_ == null ? 0 : 1)

  protobuf_size -> int:
    return (value_oneof_case_ == VALUE_STR ? (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_STRING value_str --as_field=1) : 0)

// MESSAGE END: .api.LogEvent.LogValue

class LogEvent extends _protobuf.Message:
  message/string := ""
  level/int/*enum<LogLevel>*/ := 0
  names/List/*<LogEvent_LogValue>*/ := []
  tags/Map/*<string,LogEvent_LogValue>*/ := {:}

  constructor
      --message/string?=null
      --level/int?/*enum<LogLevel>?*/=null
      --names/List?/*<LogEvent_LogValue>*/=null
      --tags/Map?/*<string,LogEvent_LogValue>*/=null:
    if message != null:
      this.message = message
    if level != null:
      this.level = level
    if names != null:
      this.names = names
    if tags != null:
      this.tags = tags

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        message = r.read_primitive _protobuf.PROTOBUF_TYPE_STRING
      r.read_field 2:
        level = r.read_primitive _protobuf.PROTOBUF_TYPE_ENUM
      r.read_field 3:
        names = r.read_array _protobuf.PROTOBUF_TYPE_MESSAGE names:
          LogEvent_LogValue.deserialize r
      r.read_field 4:
        tags = r.read_map tags
          :
            r.read_primitive _protobuf.PROTOBUF_TYPE_STRING
          :
            LogEvent_LogValue.deserialize r

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    w.write_primitive _protobuf.PROTOBUF_TYPE_STRING message --as_field=1
    w.write_primitive _protobuf.PROTOBUF_TYPE_ENUM level --as_field=2
    w.write_array _protobuf.PROTOBUF_TYPE_MESSAGE names --as_field=3: | value/LogEvent_LogValue | 
      value.serialize w
    w.write_map _protobuf.PROTOBUF_TYPE_STRING _protobuf.PROTOBUF_TYPE_MESSAGE tags --as_field=4
      : | key/string | 
        w.write_primitive _protobuf.PROTOBUF_TYPE_STRING key
      : | value/LogEvent_LogValue | 
        value.serialize w

  num_fields_set -> int:
    return (message.is_empty ? 0 : 1)
      + (level == 0 ? 0 : 1)
      + (names.is_empty ? 0 : 1)
      + (tags.is_empty ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_STRING message --as_field=1)
      + (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_ENUM level --as_field=2)
      + (_protobuf.size_array _protobuf.PROTOBUF_TYPE_MESSAGE names --as_field=3)
      + (_protobuf.size_map _protobuf.PROTOBUF_TYPE_STRING _protobuf.PROTOBUF_TYPE_MESSAGE tags --as_field=4)

// MESSAGE END: .api.LogEvent

// MESSAGE START: .api.SystemEvent
// ENUM START: SystemEvent_QueueType
SystemEvent_QueueType_UNKNOWN/int/*enum<SystemEvent_QueueType>*/ ::= 0
SystemEvent_QueueType_METRICS/int/*enum<SystemEvent_QueueType>*/ ::= 1
SystemEvent_QueueType_LOG/int/*enum<SystemEvent_QueueType>*/ ::= 2
SystemEvent_QueueType_PUBSUB/int/*enum<SystemEvent_QueueType>*/ ::= 3
// ENUM END: .api.SystemEvent.QueueType

// MESSAGE START: .api.SystemEvent.QueueOverflow
class SystemEvent_QueueOverflow extends _protobuf.Message:
  event_type/int/*enum<SystemEvent_QueueType>*/ := 0
  event_size/int := 0

  constructor
      --event_type/int?/*enum<SystemEvent_QueueType>?*/=null
      --event_size/int?=null:
    if event_type != null:
      this.event_type = event_type
    if event_size != null:
      this.event_size = event_size

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        event_type = r.read_primitive _protobuf.PROTOBUF_TYPE_ENUM
      r.read_field 2:
        event_size = r.read_primitive _protobuf.PROTOBUF_TYPE_INT64

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    w.write_primitive _protobuf.PROTOBUF_TYPE_ENUM event_type --as_field=1
    w.write_primitive _protobuf.PROTOBUF_TYPE_INT64 event_size --as_field=2

  num_fields_set -> int:
    return (event_type == 0 ? 0 : 1)
      + (event_size == 0 ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_ENUM event_type --as_field=1)
      + (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_INT64 event_size --as_field=2)

// MESSAGE END: .api.SystemEvent.QueueOverflow

// MESSAGE START: .api.SystemEvent.Signal
class SystemEvent_Signal extends _protobuf.Message:

  constructor:

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      1

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    1
  num_fields_set -> int:
    return 0

  protobuf_size -> int:
    return 0

// MESSAGE END: .api.SystemEvent.Signal

// MESSAGE START: .api.SystemEvent.ProcessStop
class SystemEvent_ProcessStop extends _protobuf.Message:
  exit_code/int := 0

  constructor
      --exit_code/int?=null:
    if exit_code != null:
      this.exit_code = exit_code

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        exit_code = r.read_primitive _protobuf.PROTOBUF_TYPE_UINT32

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    w.write_primitive _protobuf.PROTOBUF_TYPE_UINT32 exit_code --as_field=1

  num_fields_set -> int:
    return (exit_code == 0 ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_UINT32 exit_code --as_field=1)

// MESSAGE END: .api.SystemEvent.ProcessStop

// MESSAGE START: .api.SystemEvent.StackTrace
class SystemEvent_StackTrace extends _protobuf.Message:
  stack_trace/ByteArray := ByteArray 0

  constructor
      --stack_trace/ByteArray?=null:
    if stack_trace != null:
      this.stack_trace = stack_trace

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        stack_trace = r.read_primitive _protobuf.PROTOBUF_TYPE_BYTES

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    w.write_primitive _protobuf.PROTOBUF_TYPE_BYTES stack_trace --as_field=1

  num_fields_set -> int:
    return (stack_trace.is_empty ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_BYTES stack_trace --as_field=1)

// MESSAGE END: .api.SystemEvent.StackTrace

// MESSAGE START: .api.SystemEvent.Boot
// ENUM START: Boot_SystemEvent_State
Boot_SystemEvent_State_UNKNOWN/int/*enum<Boot_SystemEvent_State>*/ ::= 0
Boot_SystemEvent_State_NORMAL/int/*enum<Boot_SystemEvent_State>*/ ::= 1
Boot_SystemEvent_State_FACTORY/int/*enum<Boot_SystemEvent_State>*/ ::= 2
Boot_SystemEvent_State_SAFE_MODE/int/*enum<Boot_SystemEvent_State>*/ ::= 4
// ENUM END: .api.SystemEvent.Boot.State

class SystemEvent_Boot extends _protobuf.Message:
  reset_reason/int := 0
  state/int := 0
  boot_failures/int := 0
  out_of_memmory_count/int := 0

  constructor
      --reset_reason/int?=null
      --state/int?=null
      --boot_failures/int?=null
      --out_of_memmory_count/int?=null:
    if reset_reason != null:
      this.reset_reason = reset_reason
    if state != null:
      this.state = state
    if boot_failures != null:
      this.boot_failures = boot_failures
    if out_of_memmory_count != null:
      this.out_of_memmory_count = out_of_memmory_count

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        reset_reason = r.read_primitive _protobuf.PROTOBUF_TYPE_UINT32
      r.read_field 2:
        state = r.read_primitive _protobuf.PROTOBUF_TYPE_UINT32
      r.read_field 3:
        boot_failures = r.read_primitive _protobuf.PROTOBUF_TYPE_UINT32
      r.read_field 4:
        out_of_memmory_count = r.read_primitive _protobuf.PROTOBUF_TYPE_UINT32

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    w.write_primitive _protobuf.PROTOBUF_TYPE_UINT32 reset_reason --as_field=1
    w.write_primitive _protobuf.PROTOBUF_TYPE_UINT32 state --as_field=2
    w.write_primitive _protobuf.PROTOBUF_TYPE_UINT32 boot_failures --as_field=3
    w.write_primitive _protobuf.PROTOBUF_TYPE_UINT32 out_of_memmory_count --as_field=4

  num_fields_set -> int:
    return (reset_reason == 0 ? 0 : 1)
      + (state == 0 ? 0 : 1)
      + (boot_failures == 0 ? 0 : 1)
      + (out_of_memmory_count == 0 ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_UINT32 reset_reason --as_field=1)
      + (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_UINT32 state --as_field=2)
      + (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_UINT32 boot_failures --as_field=3)
      + (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_UINT32 out_of_memmory_count --as_field=4)

// MESSAGE END: .api.SystemEvent.Boot

// MESSAGE START: .api.SystemEvent.WiFi
class SystemEvent_WiFi extends _protobuf.Message:
  ssid/string := ""

  constructor
      --ssid/string?=null:
    if ssid != null:
      this.ssid = ssid

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        ssid = r.read_primitive _protobuf.PROTOBUF_TYPE_STRING

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    w.write_primitive _protobuf.PROTOBUF_TYPE_STRING ssid --as_field=1

  num_fields_set -> int:
    return (ssid.is_empty ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_STRING ssid --as_field=1)

// MESSAGE END: .api.SystemEvent.WiFi

// MESSAGE START: .api.SystemEvent.Cellular
class SystemEvent_Cellular extends _protobuf.Message:

  constructor:

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      1

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    1
  num_fields_set -> int:
    return 0

  protobuf_size -> int:
    return 0

// MESSAGE END: .api.SystemEvent.Cellular

// MESSAGE START: .api.SystemEvent.OS
class SystemEvent_OS extends _protobuf.Message:

  constructor:

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      1

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    1
  num_fields_set -> int:
    return 0

  protobuf_size -> int:
    return 0

// MESSAGE END: .api.SystemEvent.OS

// MESSAGE START: .api.SystemEvent.Ethernet
class SystemEvent_Ethernet extends _protobuf.Message:

  constructor:

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      1

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    1
  num_fields_set -> int:
    return 0

  protobuf_size -> int:
    return 0

// MESSAGE END: .api.SystemEvent.Ethernet

// MESSAGE START: .api.SystemEvent.ConnectionInfo
class SystemEvent_ConnectionInfo extends _protobuf.Message:
  // ONEOF START: .api.SystemEvent.ConnectionInfo.info
  info_ := null
  info_oneof_case_/int? := null

  info_oneof_clear -> none:
    info_ = null
    info_oneof_case_ = null

  static INFO_WIFI/int ::= 1
  static INFO_CELLULAR/int ::= 2
  static INFO_OS/int ::= 3
  static INFO_ETHERNET/int ::= 4

  info_oneof_case -> int?:
    return info_oneof_case_

  info_wifi -> SystemEvent_WiFi:
    return info_

  info_wifi= info/SystemEvent_WiFi -> none:
    info_ = info
    info_oneof_case_ = INFO_WIFI

  info_cellular -> SystemEvent_Cellular:
    return info_

  info_cellular= info/SystemEvent_Cellular -> none:
    info_ = info
    info_oneof_case_ = INFO_CELLULAR

  info_os -> SystemEvent_OS:
    return info_

  info_os= info/SystemEvent_OS -> none:
    info_ = info
    info_oneof_case_ = INFO_OS

  info_ethernet -> SystemEvent_Ethernet:
    return info_

  info_ethernet= info/SystemEvent_Ethernet -> none:
    info_ = info
    info_oneof_case_ = INFO_ETHERNET

  // ONEOF END: .api.SystemEvent.ConnectionInfo.info

  constructor
      --info_wifi/SystemEvent_WiFi?=null
      --info_cellular/SystemEvent_Cellular?=null
      --info_os/SystemEvent_OS?=null
      --info_ethernet/SystemEvent_Ethernet?=null:
    if info_wifi != null:
      this.info_wifi = info_wifi
    if info_cellular != null:
      this.info_cellular = info_cellular
    if info_os != null:
      this.info_os = info_os
    if info_ethernet != null:
      this.info_ethernet = info_ethernet

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        info_wifi = SystemEvent_WiFi.deserialize r
      r.read_field 2:
        info_cellular = SystemEvent_Cellular.deserialize r
      r.read_field 3:
        info_os = SystemEvent_OS.deserialize r
      r.read_field 4:
        info_ethernet = SystemEvent_Ethernet.deserialize r

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    if info_oneof_case_ == INFO_WIFI:
      info_.serialize w --as_field=INFO_WIFI --oneof
    if info_oneof_case_ == INFO_CELLULAR:
      info_.serialize w --as_field=INFO_CELLULAR --oneof
    if info_oneof_case_ == INFO_OS:
      info_.serialize w --as_field=INFO_OS --oneof
    if info_oneof_case_ == INFO_ETHERNET:
      info_.serialize w --as_field=INFO_ETHERNET --oneof

  num_fields_set -> int:
    return (info_oneof_case_ == null ? 0 : 1)

  protobuf_size -> int:
    return (info_oneof_case_ == INFO_WIFI ? (_protobuf.size_embedded_message (info_wifi.protobuf_size) --as_field=1) : 0)
      + (info_oneof_case_ == INFO_CELLULAR ? (_protobuf.size_embedded_message (info_cellular.protobuf_size) --as_field=2) : 0)
      + (info_oneof_case_ == INFO_OS ? (_protobuf.size_embedded_message (info_os.protobuf_size) --as_field=3) : 0)
      + (info_oneof_case_ == INFO_ETHERNET ? (_protobuf.size_embedded_message (info_ethernet.protobuf_size) --as_field=4) : 0)

// MESSAGE END: .api.SystemEvent.ConnectionInfo

// MESSAGE START: .api.SystemEvent.Connected
class SystemEvent_Connected extends _protobuf.Message:
  time_spent/_core.Duration := _core.Duration.ZERO
  connection_info/SystemEvent_ConnectionInfo := SystemEvent_ConnectionInfo

  constructor
      --time_spent/_core.Duration?=null
      --connection_info/SystemEvent_ConnectionInfo?=null:
    if time_spent != null:
      this.time_spent = time_spent
    if connection_info != null:
      this.connection_info = connection_info

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        time_spent = _protobuf.deserialize_duration r
      r.read_field 2:
        connection_info = SystemEvent_ConnectionInfo.deserialize r

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    _protobuf.serialize_duration time_spent w --as_field=1
    connection_info.serialize w --as_field=2

  num_fields_set -> int:
    return (time_spent.is_zero ? 0 : 1)
      + (connection_info.is_empty ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_duration time_spent --as_field=1)
      + (_protobuf.size_embedded_message (connection_info.protobuf_size) --as_field=2)

// MESSAGE END: .api.SystemEvent.Connected

// MESSAGE START: .api.SystemEvent.ConnectionFailed
class SystemEvent_ConnectionFailed extends _protobuf.Message:
  time_spent/_core.Duration := _core.Duration.ZERO
  connection_info/SystemEvent_ConnectionInfo := SystemEvent_ConnectionInfo

  constructor
      --time_spent/_core.Duration?=null
      --connection_info/SystemEvent_ConnectionInfo?=null:
    if time_spent != null:
      this.time_spent = time_spent
    if connection_info != null:
      this.connection_info = connection_info

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        time_spent = _protobuf.deserialize_duration r
      r.read_field 2:
        connection_info = SystemEvent_ConnectionInfo.deserialize r

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    _protobuf.serialize_duration time_spent w --as_field=1
    connection_info.serialize w --as_field=2

  num_fields_set -> int:
    return (time_spent.is_zero ? 0 : 1)
      + (connection_info.is_empty ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_duration time_spent --as_field=1)
      + (_protobuf.size_embedded_message (connection_info.protobuf_size) --as_field=2)

// MESSAGE END: .api.SystemEvent.ConnectionFailed

class SystemEvent extends _protobuf.Message:
  // ONEOF START: .api.SystemEvent.message
  message_ := null
  message_oneof_case_/int? := null

  message_oneof_clear -> none:
    message_ = null
    message_oneof_case_ = null

  static MESSAGE_PROCESS_START/int ::= 1
  static MESSAGE_PROCESS_STOP/int ::= 2
  static MESSAGE_STACK_TRACE/int ::= 3
  static MESSAGE_BOOT/int ::= 4
  static MESSAGE_SHUTDOWN/int ::= 5
  static MESSAGE_OVERFLOW/int ::= 6
  static MESSAGE_CONNECTED/int ::= 7
  static MESSAGE_CONNECTION_FAILED/int ::= 8

  message_oneof_case -> int?:
    return message_oneof_case_

  message_process_start -> SystemEvent_Signal:
    return message_

  message_process_start= message/SystemEvent_Signal -> none:
    message_ = message
    message_oneof_case_ = MESSAGE_PROCESS_START

  message_process_stop -> SystemEvent_ProcessStop:
    return message_

  message_process_stop= message/SystemEvent_ProcessStop -> none:
    message_ = message
    message_oneof_case_ = MESSAGE_PROCESS_STOP

  message_stack_trace -> SystemEvent_StackTrace:
    return message_

  message_stack_trace= message/SystemEvent_StackTrace -> none:
    message_ = message
    message_oneof_case_ = MESSAGE_STACK_TRACE

  message_boot -> SystemEvent_Boot:
    return message_

  message_boot= message/SystemEvent_Boot -> none:
    message_ = message
    message_oneof_case_ = MESSAGE_BOOT

  message_shutdown -> SystemEvent_Signal:
    return message_

  message_shutdown= message/SystemEvent_Signal -> none:
    message_ = message
    message_oneof_case_ = MESSAGE_SHUTDOWN

  message_overflow -> SystemEvent_QueueOverflow:
    return message_

  message_overflow= message/SystemEvent_QueueOverflow -> none:
    message_ = message
    message_oneof_case_ = MESSAGE_OVERFLOW

  message_connected -> SystemEvent_Connected:
    return message_

  message_connected= message/SystemEvent_Connected -> none:
    message_ = message
    message_oneof_case_ = MESSAGE_CONNECTED

  message_connection_failed -> SystemEvent_ConnectionFailed:
    return message_

  message_connection_failed= message/SystemEvent_ConnectionFailed -> none:
    message_ = message
    message_oneof_case_ = MESSAGE_CONNECTION_FAILED

  // ONEOF END: .api.SystemEvent.message

  constructor
      --message_process_start/SystemEvent_Signal?=null
      --message_process_stop/SystemEvent_ProcessStop?=null
      --message_stack_trace/SystemEvent_StackTrace?=null
      --message_boot/SystemEvent_Boot?=null
      --message_shutdown/SystemEvent_Signal?=null
      --message_overflow/SystemEvent_QueueOverflow?=null
      --message_connected/SystemEvent_Connected?=null
      --message_connection_failed/SystemEvent_ConnectionFailed?=null:
    if message_process_start != null:
      this.message_process_start = message_process_start
    if message_process_stop != null:
      this.message_process_stop = message_process_stop
    if message_stack_trace != null:
      this.message_stack_trace = message_stack_trace
    if message_boot != null:
      this.message_boot = message_boot
    if message_shutdown != null:
      this.message_shutdown = message_shutdown
    if message_overflow != null:
      this.message_overflow = message_overflow
    if message_connected != null:
      this.message_connected = message_connected
    if message_connection_failed != null:
      this.message_connection_failed = message_connection_failed

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        message_process_start = SystemEvent_Signal.deserialize r
      r.read_field 2:
        message_process_stop = SystemEvent_ProcessStop.deserialize r
      r.read_field 3:
        message_stack_trace = SystemEvent_StackTrace.deserialize r
      r.read_field 4:
        message_boot = SystemEvent_Boot.deserialize r
      r.read_field 5:
        message_shutdown = SystemEvent_Signal.deserialize r
      r.read_field 6:
        message_overflow = SystemEvent_QueueOverflow.deserialize r
      r.read_field 7:
        message_connected = SystemEvent_Connected.deserialize r
      r.read_field 8:
        message_connection_failed = SystemEvent_ConnectionFailed.deserialize r

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    if message_oneof_case_ == MESSAGE_PROCESS_START:
      message_.serialize w --as_field=MESSAGE_PROCESS_START --oneof
    if message_oneof_case_ == MESSAGE_PROCESS_STOP:
      message_.serialize w --as_field=MESSAGE_PROCESS_STOP --oneof
    if message_oneof_case_ == MESSAGE_STACK_TRACE:
      message_.serialize w --as_field=MESSAGE_STACK_TRACE --oneof
    if message_oneof_case_ == MESSAGE_BOOT:
      message_.serialize w --as_field=MESSAGE_BOOT --oneof
    if message_oneof_case_ == MESSAGE_SHUTDOWN:
      message_.serialize w --as_field=MESSAGE_SHUTDOWN --oneof
    if message_oneof_case_ == MESSAGE_OVERFLOW:
      message_.serialize w --as_field=MESSAGE_OVERFLOW --oneof
    if message_oneof_case_ == MESSAGE_CONNECTED:
      message_.serialize w --as_field=MESSAGE_CONNECTED --oneof
    if message_oneof_case_ == MESSAGE_CONNECTION_FAILED:
      message_.serialize w --as_field=MESSAGE_CONNECTION_FAILED --oneof

  num_fields_set -> int:
    return (message_oneof_case_ == null ? 0 : 1)

  protobuf_size -> int:
    return (message_oneof_case_ == MESSAGE_PROCESS_START ? (_protobuf.size_embedded_message (message_process_start.protobuf_size) --as_field=1) : 0)
      + (message_oneof_case_ == MESSAGE_PROCESS_STOP ? (_protobuf.size_embedded_message (message_process_stop.protobuf_size) --as_field=2) : 0)
      + (message_oneof_case_ == MESSAGE_STACK_TRACE ? (_protobuf.size_embedded_message (message_stack_trace.protobuf_size) --as_field=3) : 0)
      + (message_oneof_case_ == MESSAGE_BOOT ? (_protobuf.size_embedded_message (message_boot.protobuf_size) --as_field=4) : 0)
      + (message_oneof_case_ == MESSAGE_SHUTDOWN ? (_protobuf.size_embedded_message (message_shutdown.protobuf_size) --as_field=5) : 0)
      + (message_oneof_case_ == MESSAGE_OVERFLOW ? (_protobuf.size_embedded_message (message_overflow.protobuf_size) --as_field=6) : 0)
      + (message_oneof_case_ == MESSAGE_CONNECTED ? (_protobuf.size_embedded_message (message_connected.protobuf_size) --as_field=7) : 0)
      + (message_oneof_case_ == MESSAGE_CONNECTION_FAILED ? (_protobuf.size_embedded_message (message_connection_failed.protobuf_size) --as_field=8) : 0)

// MESSAGE END: .api.SystemEvent

// MESSAGE START: .api.PubSubEvent
class PubSubEvent extends _protobuf.Message:
  topic/_pubsub.Topic := _pubsub.Topic
  payload/ByteArray := ByteArray 0

  constructor
      --topic/_pubsub.Topic?=null
      --payload/ByteArray?=null:
    if topic != null:
      this.topic = topic
    if payload != null:
      this.payload = payload

  constructor.deserialize r/_protobuf.Reader:
    r.read_message:
      r.read_field 1:
        topic = _pubsub.Topic.deserialize r
      r.read_field 2:
        payload = r.read_primitive _protobuf.PROTOBUF_TYPE_BYTES

  serialize w/_protobuf.Writer --as_field/int?=null --oneof/bool=false -> none:
    w.write_message_header this --as_field=as_field --oneof=oneof
    topic.serialize w --as_field=1
    w.write_primitive _protobuf.PROTOBUF_TYPE_BYTES payload --as_field=2

  num_fields_set -> int:
    return (topic.is_empty ? 0 : 1)
      + (payload.is_empty ? 0 : 1)

  protobuf_size -> int:
    return (_protobuf.size_embedded_message (topic.protobuf_size) --as_field=1)
      + (_protobuf.size_primitive _protobuf.PROTOBUF_TYPE_BYTES payload --as_field=2)

// MESSAGE END: .api.PubSubEvent

